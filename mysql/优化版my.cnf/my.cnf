# For advice on how to change settings please see
# http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html
[client]
port = 3216
socket=/opt/mysql/mysql.sock
default-character-set = utf8mb4

[mysqld]
#
# Remove leading # and set to the amount of RAM for the most important data
# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.
# innodb_buffer_pool_size = 128M
#
# Remove leading # to turn on a very important data integrity option: logging
# changes to the binary log between backups.
# log_bin
#
# Remove leading # to set options mainly useful for reporting servers.
# The server defaults are faster for transactions and fast SELECTs.
# Adjust sizes as needed, experiment to find the optimal values.
# join_buffer_size = 128M
# sort_buffer_size = 2M
# read_rnd_buffer_size = 2M
port= 3216
datadir=/opt/mysql
socket=/opt/mysql/mysql.sock
default-time_zone = '+8:00'
sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES
#sql_mode=STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION;
#slave
#bind-address = 192.168.10.10
server-id = 3
log_bin = mysql-bin

max_binlog_size = 100M
binlog-ignore-db=information_schema
binlog-ignore-db=mysql
log-slave-updates = on
slave-skip-errors=all
slave-net-timeout=60
slave_parallel_workers = 4
slave_parallel_type= logical_clock
#relay-log=mysql-relay-bin
#log_slave_updates=on
#auto_increment_increment=2
#auto_increment_offset=1

# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid

#MySQL选项以避免外部锁定。该选项默认开启 
skip-external-locking

#grant 时，必须使用ip不能使用主机名 
#skip-name-resolve

#启动mysql,不启动复制
#skip-slave-start

#接受队列，对于没建立tcp连接的请求队列放入缓存中，队列大小为back_log，受限制与OS参数
back_log=3000

#最大并发连接数 ，增大该值需要相应增加允许打开的文件描述符数 
max_connections=32000

#如果某个用户发起的连接error超过该数值，则该用户的下次连接将被阻塞，直到管理员执行flush hosts;
max_connect_errors = 10000

#MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个,当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个
open_files_limit = 65535

#参数设置表高速缓存的数目。每个连接进来，都会至少打开一个表缓存。
#table_cache = 512

#连接超时之前的最大秒数,在Linux平台上，该超时也用作等待服务器首次回应的时间
connect-timeout = 10

#等待关闭连接的时间
wait-timeout=28800

#关闭连接之前，允许interactive_timeout（取代了wait_timeout）秒的不活动时间。客户端的会话wait_timeout变量被设为会话interactive_timeout变量的值
interactive-timeout=28800

#从服务器也能够处理网络连接中断,只有从服务器超过slave_net_timeout秒没有从主服务器收到数据才通知网络中断
slave-net-timeout=600

#从服务器读取信息的超时 
#net_read_timeout = 30

#从服务器写入信息的超时
#net_write_timeout = 60

#MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中,当把table_open_cache设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上
table_open_cache = 20480

#接受的数据包大小；
max_allowed_packet = 2G

#一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K
binlog_cache_size = 1M

#定义了用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。这个变量支持动态改变
max_heap_table_size = 8M

#MySQL的heap（堆积）表缓冲大小
tmp_table_size = 16M

#MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。
#如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能
read_buffer_size = 100M

#MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，
#MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大
read_rnd_buffer_size = 400M

#MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。
#如果不能，可以尝试增加sort_buffer_size变量的大小
sort_buffer_size = 400M

#联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享
join_buffer_size=400M

#表示可以重新利用保存在缓存中线程的数量
thread_cache_size = 100

#MySQL的查询缓冲大小
query_cache_size= 512M

#指定单个查询能够使用的缓冲区大小，默认1M
query_cache_limit=100M

#指定用于索引的缓冲区大小
key_buffer_size = 512M

#分词词汇最小长度，默认4
ft_min_word_len = 4

#超过30天的binlog删除
expire_logs_days = 10

slow_query_log = 1

#慢查询时间 超过1秒则为慢查询
long_query_time = 1
slow_query_log_file = /opt/mysql/mysql-slow.log

#lower_case_table_names = 1 #不区分大小写

#默认存储引擎
default-storage-engine = InnoDB

#InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间
innodb_file_per_table=1

#限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300
innodb_open_files = 500

#InnoDB使用一个缓冲池来保存索引和原始数据
innodb_buffer_pool_size = 12G

#innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4
innodb_write_io_threads = 4
innodb_read_io_threads = 4

#默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量
innodb_thread_concurrency=0

#InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操作是主线程的一部分，这意味着运行时它可能会堵塞其它的数据库操作。
innodb_purge_threads = 1

#如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度
innodb_flush_log_at_trx_commit = 2

#此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间
innodb_log_buffer_size = 16M

#此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间
innodb_log_file_size = 90M

#为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3
innodb_log_files_in_group = 3

#innodb主线程刷新缓存池中的数据，使脏数据比例小于90%
innodb_max_dirty_pages_pct=90

#InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒
innodb_lock_wait_timeout = 120

#批量插入缓存大小， 这个参数是针对MyISAM存储引擎来说的。适用于在一次性插入100-1000+条记录时， 提高效率。默认值是8M。可以针对数据量的大小，翻倍增加
bulk_insert_buffer_size = 64M

#MyISAM设置恢复表之时使用的缓冲区的尺寸，当在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区
myisam_sort_buffer_size = 64M

#如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出
myisam_max_sort_file_size = 10G

#如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内)
myisam_repair_threads = 1

#服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。默认值：28800秒（8小时）
interactive_timeout=28800

#服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，
wait_timeout=28800

innodb_autoinc_lock_mode=1

#server级别字符集 
character-set-server=utf8mb4
collation-server=utf8mb4_unicode_ci

[mysqldump]
quick
max_allowed_packet = 2G

[mysql]
no-auto-rehash
# Remove the next comment character if you are not familiar with SQL
#safe-updates
default-character-set = utf8mb4
socket=/opt/mysql/mysql.sock
[myisamchk]
key_buffer_size = 128M
sort_buffer_size = 128M
read_buffer = 4M
write_buffer = 4M

[mysqlhotcopy]
interactive-timeout


